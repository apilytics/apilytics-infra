name: "CI"

on: pull_request

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: terraform

jobs:
  commits:
    name: "Commits"
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: "Check commits of the PR branch"
        run: ../.github/check_commits.sh

  plan-infra:
    name: "Plan Infra"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@ea7b857d8a33dc2fb4ef5a724500044281b49a5e  # v1.6.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec  # 1.3.2

      - name: "Terraform fmt"
        id: fmt
        run: terraform fmt -recursive -check -diff

      - name: "Terraform init"
        id: init
        run: terraform init

      - name: "Terraform validate"
        id: validate
        run: terraform validate -no-color

      - name: "Set TFPLAN variable"
        run: echo "TFPLAN=${{ github.event.pull_request.head.sha }}.tfplan" >> $GITHUB_ENV

      - name: "Terraform plan"
        id: plan
        run: terraform plan -no-color -input=false -out="$TFPLAN"
        env:
          TF_VAR_geoip_prod_api_key: ${{ secrets.TF_VAR_geoip_prod_api_key }}

      - name: "Store the generated plan in S3"
        run: aws s3 mv "$TFPLAN" s3://apilytics-terraform-state/plans/

      - name: "Show plan info in the PR"
        uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
